# from the qemu wiki 'https://wiki.qemu.org/Documentation/Networking'
# a fully working briding solution : https://wiki.qemu.org/Documentation/Networking/NAT


# macvtap bridge manually :
--------------------------------------macvtap---------------------------------------
# https://ahelpme.com/linux/howto-do-qemu-full-virtualization-with-macvtap-networking/
# http://www.voidcn.com/article/p-croskczs-hg.html
# https://www.sysa.tech/article/26
	ip link add link [phy-interface] name macvtap0 type macvtap type [bridge | vepa]
	chown :kvm /dev/tap$(cat /sys/class/net/macvtap0/ifindex) # user must be in kvm group
	chmod g+rw /dev/tap$(cat /sys/class/net/macvtap0/ifindex)
	ip link set macvtap0 up
 	-net nic,model=virtio,macaddr=$(cat /sys/class/net/macvtap0/address)
	-net tap,fd=3 3<>/dev/tap$(cat /sys/class/net/macvtap0/ifindex)
------------------------------------------------------------------------------------


---------------------------------------bridge-----------------------------------------
# this is how to use iproute2 "ip" command to bridge qemu
# virtual machines to external network using NAT via iptables

# The complete Script : (see my simplified version bellow)
	==============================================================================================================

	#!/bin/sh
	#
	# Copyright IBM, Corp. 2010
	#
	# Authors:
	#  Anthony Liguori <aliguori@us.ibm.com>
	#
	# This work is licensed under the terms of the GNU GPL, version 2.  See
	# the COPYING file in the top-level directory.

	# Set to the name of your bridge
	BRIDGE=br0

	# Network information
	NETWORK=192.168.53.0
	NETMASK=255.255.255.0
	GATEWAY=192.168.53.1
	DHCPRANGE=192.168.53.2,192.168.53.254

	# Optionally parameters to enable PXE support
	TFTPROOT=
	BOOTP=

	do_brctl() {
	    brctl "$@"
	}

	do_ifconfig() {
	    ifconfig "$@"
	}

	do_dd() {
	    dd "$@"
	}

	do_iptables_restore() {
	    iptables-restore "$@"
	}

	do_dnsmasq() {
	    dnsmasq "$@"
	}

	check_bridge() {
	    if do_brctl show | grep "^$1" > /dev/null 2> /dev/null; then
		return 1
	    else
		return 0
	    fi
	}

	create_bridge() {
	    do_brctl addbr "$1"
	    do_brctl stp "$1" off
	    do_brctl setfd "$1" 0
	    do_ifconfig "$1" "$GATEWAY" netmask "$NETMASK" up
	}

	enable_ip_forward() {
	    echo 1 | do_dd of=/proc/sys/net/ipv4/ip_forward > /dev/null
	}

	add_filter_rules() {
	do_iptables_restore <<EOF
	# Generated by iptables-save v1.3.6 on Fri Aug 24 15:20:25 2007
	*nat
	:PREROUTING ACCEPT [61:9671]
	:POSTROUTING ACCEPT [121:7499]
	:OUTPUT ACCEPT [132:8691]
	-A POSTROUTING -s $NETWORK/$NETMASK -j MASQUERADE
	COMMIT
	# Completed on Fri Aug 24 15:20:25 2007
	# Generated by iptables-save v1.3.6 on Fri Aug 24 15:20:25 2007
	*filter
	:INPUT ACCEPT [1453:976046]
	:FORWARD ACCEPT [0:0]
	:OUTPUT ACCEPT [1605:194911]
	-A INPUT -i $BRIDGE -p tcp -m tcp --dport 67 -j ACCEPT
	-A INPUT -i $BRIDGE -p udp -m udp --dport 67 -j ACCEPT
	-A INPUT -i $BRIDGE -p tcp -m tcp --dport 53 -j ACCEPT
	-A INPUT -i $BRIDGE -p udp -m udp --dport 53 -j ACCEPT
	-A FORWARD -i $1 -o $1 -j ACCEPT
	-A FORWARD -s $NETWORK/$NETMASK -i $BRIDGE -j ACCEPT
	-A FORWARD -d $NETWORK/$NETMASK -o $BRIDGE -m state --state RELATED,ESTABLISHED -j ACCEPT
	-A FORWARD -o $BRIDGE -j REJECT --reject-with icmp-port-unreachable
	-A FORWARD -i $BRIDGE -j REJECT --reject-with icmp-port-unreachable
	COMMIT
	# Completed on Fri Aug 24 15:20:25 2007
	EOF
	}

	start_dnsmasq() {
	    do_dnsmasq \
		--strict-order \
		--except-interface=lo \
		--interface=$BRIDGE \
		--listen-address=$GATEWAY \
		--bind-interfaces \
		--dhcp-range=$DHCPRANGE \
		--conf-file="" \
		--pid-file=/var/run/qemu-dnsmasq-$BRIDGE.pid \
		--dhcp-leasefile=/var/run/qemu-dnsmasq-$BRIDGE.leases \
		--dhcp-no-override \
		${TFTPROOT:+"--enable-tftp"} \
		${TFTPROOT:+"--tftp-root=$TFTPROOT"} \
		${BOOTP:+"--dhcp-boot=$BOOTP"}
	}

	setup_bridge_nat() {
	    if check_bridge "$1" ; then
		create_bridge "$1"
		enable_ip_forward
		add_filter_rules "$1"
		start_dnsmasq "$1"
	    fi
	}

	setup_bridge_vlan() {
	    if check_bridge "$1" ; then
		create_bridge "$1"
		start_dnsmasq "$1"
	    fi
	}

	setup_bridge_nat "$BRIDGE"

	if test "$1" ; then
	    do_ifconfig "$1" 0.0.0.0 up
	    do_brctl addif "$BRIDGE" "$1"
	fi
	================================================================================================================

# My Versions :
## Manual configuration :
	#using brctl - iptables - ifconfig (old)
	============================================================================================================

	brctl addbr br0
	brctl stp br0 off
	brctl setfd br0 0
	ifconfig br0 192.168.1.1 netmask 255.255.255.0 up
	iptables --flush
	# create a iptables config file, e,g "iptables_config" and past the following in it:
	# change stuff in () as needed
		*nat
		:PREROUTING ACCEPT [61:9671]
		:POSTROUTING ACCEPT [121:7499]
		:OUTPUT ACCEPT [132:8691]
		-A POSTROUTING -s (192.168.1.0/255.255.255.0) -j MASQUERADE
		COMMIT
		*filter
		:INPUT ACCEPT [1453:976046]
		:FORWARD ACCEPT [0:0]
		:OUTPUT ACCEPT [1605:194911]
		-A INPUT -i (br0) -p tcp -m tcp --dport 67 -j ACCEPT
		-A INPUT -i (br0) -p udp -m udp --dport 67 -j ACCEPT
		-A INPUT -i (br0) -p tcp -m tcp --dport 53 -j ACCEPT
		-A INPUT -i (br0) -p udp -m udp --dport 53 -j ACCEPT
		-A FORWARD -i (tap0) -o (tap0) -j ACCEPT
		-A FORWARD -s (192.168.1.0/255.255.255.0) -i (br0) -j ACCEPT
		-A FORWARD -d (192.168.1.0/255.255.255.0) -o (br0) -m state --state RELATED,ESTABLISHED -j ACCEPT
		-A FORWARD -o (br0) -j REJECT --reject-with icmp-port-unreachable
		-A FORWARD -i (br0) -j REJECT --reject-with icmp-port-unreachable
		COMMIT
	iptables-restore < iptables_config
	#check that the rules has been applied
		iptables -S
	ip tuntap add mode tap tap0
	ifconfig tap0 0.0.0.0 up
	brctl addif br0 tap0

	# add the tap0 interface to the qemu-vm config file, start the vm, assign ip address manually to the
	# vm interface from the same subnet, or add dnsmasq part for auto assignments

	==========================================================================================================

# creating the bridge interface

	ip link add br0 type bridge


# creating the tap (layer2) interface, note that this interface has to be added to qemu vm arguments in that case the there is no need to create it sice qemu will create it but if it's created before starting the vm "!!!with the same name say 'tap0'!!!" it won't be auto created

	ip tuntap add dev tap0 mode tap

#setting the bridge interface as a master over the guest interface 'tap0', do this for every guest interface you want to bridge

	ip link set dev tap0 master br0

# setting the bridge interface 'br0' as a master over the physical ethernet interface, note that this will render the host pc without address sice the bridge will represent 'eth0' in the network

	ip link set dev eth0 master br0

# bring the bridge interface 'br0' up, incase the dhcp didn't assign an ip address run "dhclient" or "dhcpd" on the interface, or assign a static address in the subnet of the physical network

	ip link set dev br0 up


# direct bridging from https://gist.github.com/extremecoders-re/e8fd8a67a515fee0c873dcafc81d811c
	brctl addbr br0
	ip addr flush dev eth0
	brctl addif br0 eth0
	tunctl -t tap0 -u `whoami`
	brctl addif br0 ta0
	ifconfig eth0 up
	ifconfig tap0 up
	ifconfig br0 up
	brctl show
	dhclient -v br0

# qemu wiki
	modprobe tun tap                  # unnecessary if tun/tap is built-in
	ip link add br0 type bridge
	ip tuntap add dev tap0 mode tap
	ip link set dev tap0 master br0   # set br0 as the target bridge for tap0
	ip link set dev eth0 master br0   # set br0 as the target bridge for eth0
	ip link set dev br0 up

	ip address delete $PREFIX dev eth0
	ip address add $PREFIX dev br0
	ip route add default via $ROUTE dev br0
